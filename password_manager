import os
import json
import getpass
import random
import string
import subprocess
import sys

def install_cryptography():
    try:
        from cryptography.fernet import Fernet
    except ImportError:
        print("cryptography package not found. Installing...")
        subprocess.check_call([sys.executable, "-m", "pip", "install", "cryptography"])
        print("cryptography installed successfully.")
        from cryptography.fernet import Fernet

install_cryptography()

from cryptography.fernet import Fernet

def load_key():
    if not os.path.exists("secret.key"):
        key = Fernet.generate_key()
        with open("secret.key", "wb") as key_file:
            key_file.write(key)
    else:
        with open("secret.key", "rb") as key_file:
            key = key_file.read()
    return key

def encrypt_password(password, key):
    f = Fernet(key)
    encrypted_password = f.encrypt(password.encode())
    return encrypted_password

def decrypt_password(encrypted_password, key):
    f = Fernet(key)
    decrypted_password = f.decrypt(encrypted_password).decode()
    return decrypted_password

def save_password(account, username, password, key):
    encrypted_password = encrypt_password(password, key).decode()

    if os.path.exists("passwords.json"):
        with open("passwords.json", "r") as file:
            data = json.load(file)
    else:
        data = {}

    data[account] = {"username": username, "password": encrypted_password}

    with open("passwords.json", "w") as file:
        json.dump(data, file)

def load_passwords(key):
    if not os.path.exists("passwords.json"):
        print("No passwords stored yet.")
        return

    with open("passwords.json", "r") as file:
        data = json.load(file)

    for account, credentials in data.items():
        username = credentials["username"]
        decrypted_password = decrypt_password(credentials["password"].encode(), key)
        print(f"Account: {account}\nUsername: {username}\nPassword: {decrypted_password}\n")

def delete_password(account):
    if not os.path.exists("passwords.json"):
        print("No passwords stored yet.")
        return

    with open("passwords.json", "r") as file:
        data = json.load(file)

    if account in data:
        del data[account]
        with open("passwords.json", "w") as file:
            json.dump(data, file)
        print(f"Password for {account} deleted.")
    else:
        print(f"No password found for {account}.")

def generate_password(length):
    all_characters = string.ascii_letters + string.digits + string.punctuation
    password = ''.join(random.choice(all_characters) for i in range(length))
    return password

def main():
    key = load_key()

    while True:
        print("\nPassword Manager")
        print("1. Save a new password")
        print("2. Generate a password")
        print("3. View saved passwords")
        print("4. Delete a password")
        print("5. Exit")
        choice = input("Choose an option: ")

        if choice == "1":
            account = input("Enter account name: ")
            username = input("Enter username: ")
            password = getpass.getpass("Enter password: ")
            save_password(account, username, password, key)
            print(f"Password saved for {account}!")
        elif choice == "2":
            length = int(input("Enter the desired password length: "))
            generated_password = generate_password(length)
            print(f"Generated password: {generated_password}")
        elif choice == "3":
            print("Saved passwords:")
            load_passwords(key)
        elif choice == "4":
            account = input("Enter the account name to delete: ")
            delete_password(account)
        elif choice == "5":
            break
        else:
            print("Invalid option, try again!")

if __name__ == "__main__":
    main()
